#!/usr/bin/perl
# use CGI::Carp qw(fatalsToBrowser);
# ==================== MOFcart v2.5.10.21.03 ====================== #
# === ARES capture cookie link ==================================== #
# === REMOVAL OF COPYRIGHT NOTICE IS PROHIBITED =================== #
# === MERCHANT ORDERFORMcart ver 2.5 (PKG: 10-21-03) ============== #
# === All Rights Reserverd  © 2000-2004 rga@merchantpal.com ======= #
# === This Software Package, either individually or together, ===== #
# === may not be sold, distributed, modified, or otherwise ======== #
# === used in anyway outside the License Agreement limitations ==== #
# === Consult the License Agreement with any questions: =========== #
# === LICENSE: http://www.merchantpal.com/license.html ============ #
# ================================================================= #

BEGIN {
push(@INC, '/home/gardenth/public_html/cgi-bin/mcart');
push(@INC, '/home/gardenth/public_html/cgi-bin/mcart/lib');
push(@INC, '/home/gardenth/public_html/cgi-bin/mcart');
push(@INC, '/home/gardenth/public_html/cgi-bin/mcart/lib');
} 

require 'common.conf';

# ARES v2.5 - Affiliate Link Redirection script
# ARES v2.5 - Affiliate Referral Earnings System 4-10-2001
# Copyright @ All Rights Reserved 2001 MerchantOrderForm.com / MerchantPal.com

# This script sets a cookie on a visiting browser
# if they come here from an affiliate url
# URL: http://www.site.com/cgi-bin/ares.cgi?ID=AffiliateCouponNumber
# Also will accept a POST where name=ID value=AffiliateCouponNumber

# All this script has to do is
# 1. set the cookie (duration) HTTP using the ?ID=AffiliateNumber incoming

#  Syntax: http://www.yoursite?ID=AffiliateCouponNumber
#  or <form POST .. http://www.yoursite>
#     <input type=hidden name=ID value=AffiliateCouponNumber>
#     </form>

# NOTE: The name for transmitted variable is hardcoded as "ID"
# NOTE: The value of ID will always be the Affiliate Number as generated by the ARES system

# 2. Redirect to a url (using affiliate_url.dat) for specific redirection
#    If no specific redirect url found, then redirect to default url

# CONFIGURATIONS
# WHAT DOMAINS TO DISALLOW POST FROM ?
# This list prevents those domains, IPs, etc
# From setting a bogus cookie on the visitors browser
# In theory, a sabatour could set up links to your system
# dircting lots of folks to your site attempting to set a bogus cookie
# The effect would be that if that same visitor attempted to clickthrough
# to your site from a legitimate Affiliate Link, then it would be blocked
# and no discount or credits could be logged because a bogus Affiliate Number was set
# preventing the Real number from being used ..
# This then, will black list those domains from messing with the system that way
# Use the Full http://www.domain, or the complete IP, or all possible combinations

@NOT_ALLOWED_DOMAINS = ();

# REFERRAL EARNINGS SETTINGS
# The name of cookie for affiliate tracking
# EXACTLY as in <mof.conf> $aresCookieID = "ARESv25";
$aresCookieID = "ARESv25";

# How long in (xx) hours to hold cookie
# When customer clicks through affiliate url
# the target site, they will keep the Affiliate Coupon Number
# Set as cookie for how many hours ?
# If set to zero, then cookie expires when browser closes
# 336 is two weeks, 720 is 30 days
$holdcookie = 720;

# Cookie domain
# Must not put host but only domain.ext
# You will be retrieving cookie at HTTP <mof.cgi>
# Do not define path and default domain is any location in "yourdomain.com"
# Which allows two different scripts, under two directories to retreive cookie
# NOTE: the path is not programmed into the MakeCookie yet
# NOTE: it is unecessary for now to use path with MOF v1.54
# NOTE: Because <mof.cgi> seeks the cookie and <ares.cgi> sets it
# NOTE: Both files should always run from the same directory
$cookiepath = '';

# ALLOW COOKIE OVERRIDE ?
# If an Affiliate cookie already exists but clicked in from another Affiliate ID
# Do you want to allow the most recent click through to get credit ?
# Or do you want to give credit to the previous Affiliate who holds the cookie ?
# (1) Override an existing affiliate cookie, and use most recent click through ID
# (0) Do not allow the most recent affiliate click through to override an existing affiliate
# (0) means the first affiliate to send someone to you gets the credit, if in time frame
$override_previous_cookie = 1;

# ALLOW COOKIE TO EXPIRE
# If an Affiliate Cookie already exists at time of clickthrough
# (1) Do Not update the cookie to run for another xx hours (let it expire at original time)
# (0) The cookie will be updated for another xx hours each time visitor clicks through
# If enabled the Visitor will be able to re set the cookie once it expires 
# simply by clicking through again from the affiliate's Link ..
$allow_cookie_to_expire = 1;

# Default redirect url
# where to redirect after setting cookie
# if can't find a specific redirect url
# related to the specific AffiliateCouponNumber
$defaulturl = "$mvar_strict_http_web";

# Where is the file containing the specific redirect urls
# Contains specific redirect urls for specific AffiliateCouponNumber
$redirect_path = "$mvar_front_path_mcart/data/ares_redirecturl.dat";

# MUST be enabled if ARES is operational
$lockfiles = 1 unless ($^O =~ m/mswin32/i);

# email address for owner of site used to report file opening errors
$email_address = $merchantmail;

# END OF CONFIGURATIONS	

# PROGRAM FLOW
$ID = '';
@ALLINFO = ();
$FoundURL = '';
&SetDateVariable;
&ProcessQueryString if ($ENV{'QUERY_STRING'});
&ProcessForm;
$newID = $qry{'ID'} if ($qry{'ID'});
$newID = $frm{'ID'} if ($frm{'ID'});
$existsID = &CheckCookie($aresCookieID);
$domain_disallow = &CheckNotAllowedDomains if (scalar(@NOT_ALLOWED_DOMAINS));

	if ($domain_disallow) {
	print "Location: $defaulturl\n\n";	
	exit;
	}

	# What is ID to use ?
	# if one exists do you want to override
	# if one exists do not override
	# if one doesn't exist use newID

	if ($existsID) {
		if ($override_previous_cookie && $newID) {
		$ID = $newID;
		} else {
		$ID = $existsID;
		}
		unless ($allow_cookie_to_expire) {
		&MakeCookie($ID) if ($ID);
		}
	} else {
	$ID = $newID;
	&MakeCookie($ID) if ($ID);
	}

	# If no ID present in url redirect to default
	# if ID present, but Number not found in redirect file, use default url
	# if ID present, and Number found, redirect to specific URL

	if ($ID) {
	&GetRedirectURL($ID);
		if ($FoundURL) {
		print "Location: $FoundURL\n\n";
		} else {
		print "Location: $defaulturl\n\n";
		}
	} else {
	print "Location: $defaulturl\n\n";
	}
	exit;


# GET QUERY STRING INPUT
sub ProcessQueryString {
	$buffer = $ENV{'QUERY_STRING'};
  	@pairs = split(/&/, $buffer);
  	foreach (@pairs) {
	($name, $value) = split(/=/, $_);
	$value =~ tr/+/ /;
	$qry{$name} = $value;
    	}
	}

# PROCESS FORM	
sub ProcessForm {
	read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
	@pairs = split(/&/, $buffer);
	foreach (@pairs) {
	($name, $value) = split(/=/, $_);
	$value =~ tr/+/ /;
	$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
	$frm{$name} = $value;
	}
	}

# SET DATE
sub SetDateVariable {
	local (@months) = ('January','February','March','April','May','June','July',
			'August','September','October','November','December');
	local (@days) = ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');
 	local ($sec,$min,$hour,$mday,$mon,$year,$wday) = (localtime(time))[0,1,2,3,4,5,6];
	$year += 1900;	
	$globalyear = $year;
 	$Date = "$days[$wday], $months[$mon] $mday, $year";
 	$DateDOW = "$days[$wday]";
 	$DateMDY = "$months[$mon] $mday, $year";
 	$ShortDate = sprintf("%02d%1s%02d%1s%04d",$mon+1,'/',$mday,'/',$year);
 	$Time = sprintf("%02d%1s%02d%1s%02d",$hour,':',$min,':',$sec);
	$ShortTime=$hour.":".sprintf("%02d",$min).":".sprintf("%02d",$sec)." AM" if($hour<12);
	$ShortTime="12:".sprintf("%02d",$min).":".sprintf("%02d",$sec)." AM" if($hour==0);
	$ShortTime=$hour.":".sprintf("%02d",$min).":".sprintf("%02d",$sec)." PM" if($hour==12);
	$ShortTime=($hour-12).":".sprintf("%02d",$min).":".sprintf("%02d",$sec)." PM" if($hour>12);
	 }

# MAKE GMT UNIX TIME
sub MakeUnixTime {
	local ($now) = time;
 	local ($expires) = @_;
 	$expires += $now;
 	local (@days) = ("Sun","Mon","Tue","Wed","Thu","Fri","Sat");
 	local (@months) = ("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
 	local ($sec,$min,$hour,$mday,$mon,$year,$wday) = gmtime($expires); 
 	$sec = "0" . $sec if $sec < 10; 
 	$min = "0" . $min if $min < 10; 
 	$hour = "0" . $hour if $hour < 10; 
 	$year += 1900; 
  	$expires = "$days[$wday], $mday-$months[$mon]-$year $hour:$min:$sec GMT"; 
  	return $expires;
  	}

# SET NEW COOKIE
sub MakeCookie {
	my ($setID) = @_;
	my ($expirestime);
	# Always print the cookie before the Content-Type header
	# keep cookie specified hours
	if ($holdcookie) {
	$expirestime = &MakeUnixTime($holdcookie * 3600);
	print "Set-Cookie: $aresCookieID=$setID;expires=$expirestime\n";	
	} else {
	# expire cookie when browser closed
	print "Set-Cookie: $aresCookieID=$setID\n";
	}
	}

# CHECK FOR COOKIE
sub CheckCookie {
	# Return the Affiliate's coupon number
	# If one is found on the browser
	my ($cookiename) = @_;	
	my ($n, $v, $existsID);
	$cookies = $ENV{'HTTP_COOKIE'};
	@cookie = split (/;/, $cookies);
    	foreach (@cookie) {
   	($n, $v) = split(/=/, $_);
	$existsID = $v if ($n =~ /\b$cookiename\b/);
	}
  	return ($existsID);
  	}

# EXPIRE COOKIE
sub ExpireCookie {
	# Always print the cookie before the Content-Type header
	my ($name_for_cookie) = @_;
	print "Set-Cookie: $name_for_cookie=;expires=Sat, 1-Jan-2000 12:12:12 GMT \n";	
  	}

# GET REDIRECT URL
sub GetRedirectURL {
	my ($ID) = @_;
	my ($i1,$i2);
	unless (open (FILE, "$redirect_path") ) { 
		print "Location: $defaulturl\n\n";
		exit;
		}
		flock (FILE,2) if ($lockfiles);
	  	@ALLINFO = <FILE>;
  		close (FILE);
		chop (@ALLINFO);
		foreach (@ALLINFO) {
  		($i1,$i2) = split (/\|/, $_);
			if ($ID eq "$i1") {
			$FoundURL = $i2;
			last;	
			}	
		}
	return $FoundURL;
	}

# CHECK NOT ALLOWED DOMAINS
sub CheckNotAllowedDomains {
	my ($domain_referred) = $ENV{'HTTP_REFERER'};
	$domain_referred =~ tr/A-Z/a-z/;
  	foreach (@NOT_ALLOWED_DOMAINS) {
     		if ($domain_referred =~ /$_/) { 
		$domain_disallow++;	
		}
	   	}
	return $domain_disallow;
	}

# COMMIFY NUMBERS
sub Commify {
	local $_  = shift;
    	1 while s/^(-?\d+)(\d{3})/$1,$2/;
    	return $_;
  	}

# END MERCHANT ORDERFORM Cart ver 1.54
# Copyright by RGA http://www.merchantpal.com 2000-2001
